
'''Info Header Start
Name : extLogger
Author : Wieland@AMB-ZEPH15
Saveorigin : Project.toe
Saveversion : 2023.12000
Info Header End'''
import datetime
import os
import inspect
from pathlib import Path
import json
import logging
import sqlite3
from functools import lru_cache

class extLogger:

	def __init__(self, ownerComp):
		# The component to which this extension is attached
		self.ownerComp = ownerComp
		os.makedirs( "logs", exist_ok = True )

	def get_stack_element(self, stack):
		try:
			return stack.pop( self.ownerComp.par.Traceoffset.eval() )
		except:
			return ''

	def format_stack_element(self, stack_element):
		if not stack_element: return "NA"
		return f"{stack_element.filename}.{stack_element.function}:{stack_element.lineno}"

	def Log(self, *messages, level = "INFO"):
		stack = inspect.stack()
		dataset = [ level, datetime.datetime.now().isoformat()	]
		
		debugged_stack = self.get_stack_element(stack)
		caller_stack =  self.get_stack_element(stack)
		
		dataset.append( self.format_stack_element( caller_stack ))
		dataset.append( self.format_stack_element( debugged_stack ) )

		messages = ( 
			json.dumps( message ) if isinstance( message, (dict, list, tuple)) else message 
			for message in messages 
		)

		for message in messages: dataset.append( f"{message};" )
		if self.ownerComp.par.Textport.eval(): 
			self.to_Textport( dataset )
		if self.ownerComp.par.Textfileoutput.eval(): 
			self.to_Text_File( dataset )
		if self.ownerComp.par.Jsonfileoutput.eval():
			self.to_Json_File( dataset )
		if self.ownerComp.par.Sqliteoutput.eval():
			self.to_Database( dataset )
		
		self.ownerComp.op('fifo1').appendRow( dataset )
		return

	def to_Textport(self, dataset):
		# LoggerExt.Log(message: str, level: str, withInfos: bool = True, **logItemDict: dict) -> None
		logItemDict = {
			"source" : f"{self.ownerComp.par.Logname.eval()}:{self.ownerComp.path}",
			"absFrame" : dataset[1]
		}
		op.TDResources.TDAppLogger.Log(
			"\n".join(dataset[1:]),
			level = dataset[0],
			#logItemDict = logItemDict,
			withInfos = False
		)
	
		return
	
	def path_join(self, *args):
		return "/".join([arg.strip("/").strip("\\") for arg in args])

	def timestamp(self):
		return datetime.datetime.utcnow().strftime("%Y-%m-%d") * self.ownerComp.par.Timestampedfile.eval() 

	@property
	def textfilePath(self):
		return self.path_join(
			self.ownerComp.par.Folder.eval(),
			f"{self.timestamp()}{self.ownerComp.par.Logname.eval()}.log"
		)

	def to_Text_File(self, dataset):
		debug_string = self.ownerComp.path
		for element in dataset:
			debug_string += f"{element}\t"
		debug_string += '\n'
		os.makedirs( self.ownerComp.par.Folder.eval(), exist_ok=True)
		with open( self.textfilePath, "at") as logfile:
			logfile.write( debug_string )
	
	def to_Json_File(self, dataset):
		jsonFileObject = Path(
			self.ownerComp.par.Folder.eval(), 
			f"{self.timestamp()}{self.ownerComp.par.Logname.eval()}"
		).with_suffix(".json")

		if not jsonFileObject.is_file():
			jsonFileObject.parent.mkdir( exist_ok=True, parents=True)
			jsonFileObject.touch(exist_ok=True)
			jsonFileObject.write_text('[{"NOTE":"DO NOT EDIT THIS FILE BY HAND! MACHINE WRITTEN AND HANDLED!"}]')
		
		with jsonFileObject.open("r+b") as jsonFileWriter:
			jsonFileWriter.seek(-1, 2)
			jsonFileWriter.write(",".encode(encoding="ascii"))
			jsonFileWriter.write(json.dumps({
				"level" : dataset[0],
				"timestamp" : dataset[1],
				"debugged" : dataset[2],
				"caller" : dataset[3],
				"messages" : dataset[4:]
			},ensure_ascii=True).encode(encoding="ascii"))
			jsonFileWriter.write(b"]")
		return
	

	def to_Database(self, dataset):
		databasePathObject = Path(
			
			self.ownerComp.par.Sqlitedatabase.eval()
		)
		if not databasePathObject.is_file():
			databasePathObject.parent.mkdir( exist_ok=True, parents=True)
			connector = sqlite3.connect(databasePathObject)
			cursor = connector.cursor()
			cursor.execute("CREATE TABLE info(loggerversion)")
			cursor.execute("CREATE TABLE logs(source, level, timestamp, caller, debugged_element, messages)")
			cursor.execute("""INSERT INTO info VALUES(?)""", (self.ownerComp.par.Vcversion.eval(),))
			connector.commit()
			cursor.close()
			connector.close()
		
		connector = sqlite3.connect(databasePathObject)
		cursor = connector.cursor()
		cursor.execute("INSERT INTO logs VALUES(?,?,?,?,?,?)", 
				( 	self.ownerComp.par.Logname.eval(), 
	 				dataset[0], 
					dataset[1], 
					dataset[2], 
					dataset[3], 
					"\n".join(dataset[4:]) )
		)
		connector.commit()
		cursor.close()
		connector.close()
		

		

		
		return